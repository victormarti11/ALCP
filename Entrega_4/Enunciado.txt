Un certificado sucinto de primalidad de un entero N ≥ 2 es una lista L=certificado(N) tal que:
- Si N es un primo entre 2 y 100 (inclusive), entonces L=["caso1",N]
- Si N es mayor que 100 y N−1=p1^(a1)⋯pr^(ar), con p1<p2<⋯<pr primos distintos y los ai≥1, entonces

L=["caso2",N,[p1,a1,certificado(p1),x1],...,[pr,ar,certificado(pr),xr]]
donde 1≤xi<N, xi^(N-1)≡1(modN), y xi^((N−1)/pi)!≢ 1(mod N).


Implementar en Python3 la función es_certificado_valido(N,L) que
dado un entero N ≥ 2 y una lista L, determine si L es un certificado
sucinto de primalidad de N.
Todo el código debe estar en el fichero entrega4.py.
La función debe comprobar que L tiene el formato correcto y que se cumplen todas las condiciones.
Notar que por el teorema de Lucas, solo los primos N ≥ 2 pueden tener un certificado válido
El código tiene que definir también dos variables globales L1 y L2 que tengan
certificados sucintos de primalidad de 3⋅2189 + 1 y 1477!+1, respectivamente.